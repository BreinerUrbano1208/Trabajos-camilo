
'''
Problema:
    Codigo diseñado en el lenguaje de Pyton
planificación: 
    inicio de seccion 
    muestra menu de opciones x
    da opciones de elegir

#SEGUNDA ENTREGA: VECTORES, MATRICES, ORDENAMIENTO, BUSQUEDA
PLANIFICACION:
    ° vectores: implementé un cambio en la parte de mostrar el menú en un conjunto más ordenado
    ° matriz : hice la opcion de dar al usuario el menú en una matriz según la cantidad de productos que desea
    ° ordenamiento: imorementé el metodo de ordenamiento por selección para dar los pedidios hechos por el usuariio de forma acendente 
    ° busqueda: se implementó una funcion para que el usuario cotice (busque) un producto especifico de la lista que ha realizado

 #3 entrega: clases, archivo json
    ° clases: se crearon nuevas funciones añade productos a un listado y se creo una clase que almacena el menu 
    ° archivo json: se creo una funcion que almacena cada pedido de registro se almacena en un archivo diferente 
'''
import json
from colorama import Fore, init
init(autoreset=True)

class Plato:
    def __init__(self, nombre, precio):
        self.nombre = nombre
        self.precio = float(precio) 
    def __repr__(self):
        return f"{self.nombre} - {self.precio:.2f} USD"  
    @staticmethod
    def obtener_menu():
        return [
            Plato('Hamburguesa', 8.20),
            Plato('Salchipapa', 4.00),
            Plato('Desayuno', 7.32),
            Plato('Almuerzo', 7.80),
            Plato('Cena', 7.50),
            Plato('Coca-cola', 3.35),
            Plato('Café', 3.10),
            Plato('Cerveza', 4.00),
            Plato('Jugo Natural', 3.30)
        ]

def mostrar_menu(menu):
    while True:

        for i, plato in enumerate(menu, start=1):
            print(f'{i}. {plato.nombre} - {plato.precio:.2f} UDS')
        
        while True:
            opcion = input(Fore.GREEN + '\nSelecciona una opción del menú: ')
            try:
                opcion = int(opcion)
                if 1 <= opcion <= len(menu):
                    return menu[opcion - 1]
                else:
                    print(Fore.RED + 'LO SENTIMOS, TU ELECCIÓN NO SE ENCUENTRA EN EL MENÚ')
            except ValueError:
                print(Fore.GREEN + 'Por favor, introduce una opción válida del menú')

def metodo_ordenamiento(pedidos):
    ordenar_pedido = len(pedidos)
    for i in range(ordenar_pedido):
        precio_menor = i
        for j in range(i + 1, ordenar_pedido):
            if pedidos[j].precio < pedidos[precio_menor].precio:
                precio_menor = j
        pedidos[i], pedidos[precio_menor] = pedidos[precio_menor], pedidos[i]

def metodo_de_busqueda(pedidos, termino):
    resultados = []
    for pedido in pedidos:
        if termino.lower() in pedido.nombre.lower(): 
            resultados.append(pedido)
    return resultados

def guardar_pedido(pedidos):
    with open('guardar_pedido.json', 'w') as archivo:
        json.dump([p.__dict__ for p in pedidos], archivo, indent=4)

def eliminar_pedido(pedidos):
    print(Fore.RED + '\n===== Eliminar Pedido =====')
    print(Fore.RED + '|   Producto  |    Precio    |')
    print(Fore.RED + '------------------------------')
    for i, pedido in enumerate(pedidos, start=1):
        print(Fore.RED + f'{i}. {pedido.nombre:<12} | {pedido.precio:.2f} UDS')
    print(Fore.RED + '------------------------------')

    while True:
        try:
            eliminar = int(input(Fore.GREEN + 'Selecciona el número del pedido que deseas eliminar: '))
            if 1 <= eliminar <= len(pedidos):
                pedido_eliminado = pedidos.pop(eliminar - 1)
                print(Fore.RED + f'Pedido eliminado: {pedido_eliminado.nombre}')
                print(Fore.YELLOW + '\n === Registro de pedidos ===')
                print(Fore.YELLOW + '|   prodcto  |    Precio    |')
                print(Fore.YELLOW + '-----------------------------')
                for pedido in pedidos:
                    print(Fore.YELLOW + f'{pedido.nombre:<12} | {pedido.precio:.2f} UDS')
                print(Fore.YELLOW + '-----------------------------')
                print(Fore.GREEN + f'Total: {total:.2f} UDS\n')
                guardar_pedido(pedidos)
                break
            else:
                print(Fore.RED + 'El número seleccionado no es válido.')
        except ValueError:
            print(Fore.RED + 'Por favor, introduce un número válido.')

# Iniciar el programa
nombre = input(Fore.GREEN + 'Ingresa tu nombre para comenzar: ')
contraseña = 'Comida'

if contraseña == 'Comida':
    print(Fore.BLUE + '\n¡HOLA!', nombre)
    print(Fore.YELLOW + 'En nuestro menú te podemos ofrecer')
    print(Fore.BLUE + '\n===== MENÚ =====')

    opciones_menu = Plato.obtener_menu() 

    total = 0
    pedidos = []

    while True:
        pedido = mostrar_menu(opciones_menu)  
        total += pedido.precio
        pedidos.append(pedido) 
        guardar_pedido(pedidos)  

        opcion = input(Fore.GREEN + '¿Deseas algo más? (si/no): ').strip().lower()
        if opcion != 'si':
            break

    print(Fore.YELLOW + '\nPEDIDOS SIN METODO DE ORDENAMIENTO')
    print(Fore.BLUE + '\n =========== Registro de pedidos ===========')
    print(Fore.BLUE + '|   Usuario   |    Producto    |   Precio   |')
    print(Fore.BLUE + '---------------------------------------------')
    for pedido in pedidos:
        print(Fore.BLUE + f'{nombre:<12} | {pedido.nombre:<15} | {pedido.precio:.2f} UDS')
    print(Fore.BLUE + '---------------------------------------------')
    print(Fore.GREEN + f'Total: {total:.2f} UDS\n')

    metodo_ordenamiento(pedidos) 
    print(Fore.LIGHTBLUE_EX + '\nPEDIDOS CON METODO DE ORDENAMIENTO')
    print(Fore.YELLOW + '\n =========== Registro de pedidos ===========')
    print(Fore.YELLOW + '|   Usuario   |    Producto    |   Precio   |')
    print(Fore.YELLOW + '---------------------------------------------')
    for pedido in pedidos:
        print(Fore.YELLOW + f'{nombre:<12} | {pedido.nombre:<15} | {pedido.precio:.2f} UDS')
    print(Fore.YELLOW + '---------------------------------------------')
    print(Fore.GREEN + f'Total: {total:.2f} UDS\n')

    eliminar = input(Fore.GREEN + '¿Deseas eliminar algún pedido? (si/no): ').strip().lower()
    if eliminar == 'si':
        eliminar_pedido(pedidos)

    buscar = input(Fore.GREEN + 'Busca algún producto que esté dentro de tu pedido (si,no): ').strip().lower()
    if buscar == 'si':
        elemento_buscar = input(Fore.GREEN + 'Ingresa el nombre del producto que quieres cotizar: ')
        resultado = metodo_de_busqueda(pedidos, elemento_buscar)
        if resultado:
            print(Fore.MAGENTA + '\nMETODO DE BUSQUEDA')
            print(Fore.LIGHTRED_EX + '\n =========== Registro de pedidos ===========')
            print(Fore.LIGHTRED_EX + '|   Usuario   |    Producto    |   Precio   |')
            print(Fore.LIGHTRED_EX + '---------------------------------------------')
            for pedido in resultado:
                print(Fore.LIGHTRED_EX + f'{nombre:<12} | {pedido.nombre:<15} | {pedido.precio:.2f} UDS')
            print(Fore.LIGHTRED_EX + '---------------------------------------------')
        else:
            print(Fore.LIGHTWHITE_EX + f'No se encontraron elementos con el nombre "{elemento_buscar}" en tu pedido')

    print(Fore.YELLOW+ '<<<<<<< Fin del programa >>>>>>>')

else:
    print(Fore.RED + 'Su contraseña no es correcta')
